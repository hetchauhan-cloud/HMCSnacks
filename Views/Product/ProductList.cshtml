@model List<HMCSnacks.Models.ViewModels.ProductDisplayViewModel>

@{
    ViewData["Title"] = "Products";
    var page = ViewBag.Page ?? 1;
    var pageSize = ViewBag.PageSize ?? 5;
    var totalPages = ViewBag.TotalPages ?? 1;
    var serialStart = ((int)page - 1) * (int)pageSize;
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Product List</h2>
    <a asp-controller="Product" asp-action="AddProduct" class="btn btn-primary">Add Product</a>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<table class="table table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Sr. No</th>
            <th>Name</th>
            <th>Price</th>
            <th>Description</th>
            <th>Stock</th>
            <th style="width: 140px;">Actions</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Count; i++)
        {
            var vm = Model[i];
            var product = vm.Product;

            <tr>
                <td>@(serialStart + i + 1)</td>
                <td>@product.ProductName</td>
                <td>@product.Price.ToString("C")</td>
                <td>@product.Description</td>
                <td>
                    @if (vm.IsOutOfStock)
                    {
                        <span class="badge bg-danger">Out of Stock</span>
                    }
                    else if (vm.IsFewLeft)
                    {
                        <span class="badge bg-warning text-dark"> @vm.StockStatus</span>
                    }
                    else
                    {
                        <span class="badge bg-success">@vm.StockStatus</span>
                    }
                </td>
                <td class="d-flex gap-1">
                    <a asp-controller="Product" asp-action="EditProduct" asp-route-id="@product.Id" class="btn btn-sm btn-warning">Edit</a>
                    <button type="button"
                            class="btn btn-sm btn-danger"
                            data-bs-toggle="modal"
                            data-bs-target="#confirmDeleteModal"
                            data-product-name="@product.ProductName"
                            data-product-id="@product.Id">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="SoftDeleteProduct" method="post">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the product: <strong id="productNameToDelete"></strong>?</p>
                    <input type="hidden" name="id" id="productIdToDelete" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

@if (totalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == page ? "active" : "")">
                    <a class="page-link" asp-action="ProductList" asp-route-page="@i">@i</a>
                </li>
            }
        </ul>
    </nav>
}

@section Scripts {
    <script>
        const deleteModal = document.getElementById('confirmDeleteModal');
        deleteModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            const productName = button.getAttribute('data-product-name');
            const productId = button.getAttribute('data-product-id');

            document.getElementById('productNameToDelete').textContent = productName;
            document.getElementById('productIdToDelete').value = productId;
        });
    </script>
}
